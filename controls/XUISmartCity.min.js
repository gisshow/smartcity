(function(e, t) { typeof exports === "object" && typeof module !== "undefined" ? t(exports) : typeof define === "function" && define.amd ? define(["exports"], t) : t(e.XUISmartCity = {}) })(XUI, function(e) { "use strict";
    e.dir = "XUISmartCity";

    function t(e) { XUI.inherits(n, XUI.ControlBase); var t = new n(e);
        t.init(); return t }

    function n(e) { this.container1 = e;
        this.camera = new THREE.PerspectiveCamera(45, 1920 / 1080, 1, 1e4);
        this.scene = new THREE.Scene;
        this.light = null;
        this.lightDirec = null;
        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        this.renderer.setClearAlpha(0);
        this.renderer.setClearColor(0, 1);
        this.renderer.setSize(e.offsetWidth, e.offsetHeight);
        this.clock = new THREE.Clock;
        this.container1.appendChild(this.renderer.domElement);
        this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
        this.loader = new THREE.GLTFLoader;
        this.txl = new THREE.TextureLoader;
        this.texture = this.txl.load("./images/ceshi.png");
        this.texture_1 = this.txl.load("./images/flash.png");
        this.texture_4 = this.txl.load("./images/liuxing.png");
        this.texture_road = this.txl.load("./images/roadLine.png");
        this.timeValue = { time: { value: 1 } };
        this.commonUniforms = { u_time: { value: 0 } };
        this.uniform_1 = { u_color: { value: new THREE.Color(6314700) }, u_tcolor: { value: new THREE.Color(11905791) }, u_r: { value: .1 }, u_length: { value: 8 }, u_max: { value: 8 } };
        this.mixers = [];
        this.rotate = -30;
        this.renderS = 1e6;
        this.bBgDrawColor = false;
        this.strBgColor = "";
        this.strBgImage = "" } n.prototype = { constructor: n, init: function() { this.newDiv = document.createElement("div");
            this.style = document.createElement("style");
            this.newDiv.innerHTML = `\n<div class="spinner">\n  <div class="spinner-container container1">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n  <div class="spinner-container container2">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n  <div class="spinner-container container3">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n</div>\n`;
            this.newDiv.style = "width:1920px;height:1080px;position:absolute;top:0;background:#000;z-index:99;display:flex;justify-content:center;align-items: center";
            this.style.innerHTML = `\n.spinner {\n    width: 100px;\n    height: 100px;\n    position:relative;\n  }\n   \n  .container1 > div, .container2 > div, .container3 > div {\n    width: 16px;\n    height: 16px;\n    background-color: #fff;\n   \n    border-radius: 100%;\n    position: absolute;\n    -webkit-animation: bouncedelay 1.2s infinite ease-in-out;\n    animation: bouncedelay 1.2s infinite ease-in-out;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n  }\n   \n  .spinner .spinner-container {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n   \n  .container2 {\n    -webkit-transform: rotateZ(45deg);\n    transform: rotateZ(45deg);\n  }\n   \n  .container3 {\n    -webkit-transform: rotateZ(90deg);\n    transform: rotateZ(90deg);\n  }\n   \n  .circle1 { top: 0; left: 0; }\n  .circle2 { top: 0; right: 0; }\n  .circle3 { right: 0; bottom: 0; }\n  .circle4 { left: 0; bottom: 0; }\n   \n  .container2 .circle1 {\n    -webkit-animation-delay: -1.1s;\n    animation-delay: -1.1s;\n  }\n   \n  .container3 .circle1 {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n   \n  .container1 .circle2 {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n   \n  .container2 .circle2 {\n    -webkit-animation-delay: -0.8s;\n    animation-delay: -0.8s;\n  }\n   \n  .container3 .circle2 {\n    -webkit-animation-delay: -0.7s;\n    animation-delay: -0.7s;\n  }\n   \n  .container1 .circle3 {\n    -webkit-animation-delay: -0.6s;\n    animation-delay: -0.6s;\n  }\n   \n  .container2 .circle3 {\n    -webkit-animation-delay: -0.5s;\n    animation-delay: -0.5s;\n  }\n   \n  .container3 .circle3 {\n    -webkit-animation-delay: -0.4s;\n    animation-delay: -0.4s;\n  }\n   \n  .container1 .circle4 {\n    -webkit-animation-delay: -0.3s;\n    animation-delay: -0.3s;\n  }\n   \n  .container2 .circle4 {\n    -webkit-animation-delay: -0.2s;\n    animation-delay: -0.2s;\n  }\n   \n  .container3 .circle4 {\n    -webkit-animation-delay: -0.1s;\n    animation-delay: -0.1s;\n  }\n   \n  @-webkit-keyframes bouncedelay {\n    0%, 80%, 100% { -webkit-transform: scale(0.0) }\n    40% { -webkit-transform: scale(1.0) }\n  }\n   \n  @keyframes bouncedelay {\n    0%, 80%, 100% {\n      transform: scale(0.0);\n      -webkit-transform: scale(0.0);\n    } 40% {\n      transform: scale(1.0);\n      -webkit-transform: scale(1.0);\n    }\n  }\n`; let e = document.getElementsByTagName("body")[0];
            e.append(this.newDiv, this.style); var t = this;
            this.camera.position.set(-5, 10, 30);
            this.camera.lookAt(new THREE.Vector3(0, 0, 0));
            this.light = new THREE.AmbientLight(16777215);
            this.lightDirec = new THREE.DirectionalLight(16777215, 1);
            this.lightDirec.position.set(0, 5, 0);
            this.scene.add(this.lightDirec);
            this.scene.add(this.light);
            this.mainFlyContainer = new THREE.Object3D;
            this.pyramid = new THREE.Object3D;
            this.flyContainer = new THREE.Object3D;
            this.MainContainer = new THREE.Object3D;
            this.MainContainer.position.set(-1, 0, -8);
            this.container = new THREE.Object3D;
            this.txmaterial = new THREE.MeshPhysicalMaterial({ side: THREE.DoubleSide, transparent: true, roughness: .5, metalness: .5, map: t.texture, opacity: .5 });
            this.txmaterial_1 = new THREE.MeshPhysicalMaterial({ side: THREE.DoubleSide, transparent: true, roughness: .5, metalness: 0, map: t.texture_1 });
            this.texture.matrixAutoUpdate = false;
            this.texture_1.matrixAutoUpdate = false;
            this.txmaterial.map.wrapS = this.txmaterial.map.wrapT = THREE.RepeatWrapping;
            this.txmaterial_1.map.wrapS = this.txmaterial_1.map.wrapT = THREE.RepeatWrapping;
            this.txmaterial_3 = new THREE.MeshPhysicalMaterial({ color: 400714, side: THREE.DoubleSide, transparent: true, roughness: .5, metalness: .5, opacity: .3 });
            this.roadLineMat = new THREE.MeshPhysicalMaterial({ side: THREE.DoubleSide, transparent: true, roughness: .5, metalness: .5, map: t.texture_road });
            this.edgesMtl = new THREE.MeshPhysicalMaterial({ transparent: true, roughness: 0, metalness: 0, emissive: 8900331, color: 400714 });
            this.edgesMtl_1 = new THREE.MeshPhysicalMaterial({ transparent: true, roughness: 0, metalness: 0, emissive: 8900331, color: 400714 });
            this.edgesMtl_2 = new THREE.MeshPhysicalMaterial({ transparent: true, opacity: .5, side: 2, emissive: new THREE.Color(6591981), color: new THREE.Color(6591981) });
            this.txmaterial_4 = new THREE.MeshPhysicalMaterial({ side: THREE.DoubleSide, transparent: true, roughness: .5, metalness: .5, map: this.texture_4, opacity: .5 });
            this.texture_4.matrixAutoUpdate = false;
            this.txmaterial_4.map.wrapS = this.txmaterial_4.map.wrapT = THREE.RepeatWrapping;
            this.curves = this.initCircleCurveGroup(10);
            this.scene.add(this.MainContainer);
            this.MainContainer.add(this.container);
            this.MainContainer.add(this.pyramid);
            this.MainContainer.add(this.flyContainer);
            this.MainContainer.add(this.mainFlyContainer);
            this.renderer.domElement.addEventListener("resize", this.reSize.bind(this));
            this.threeStart() }, CameraMove: function() { var e = 0; var t = new THREE.Vector3(0, 0, 0);
            e = this.rotate / 100;
            this.camera.position.z = 30 * Math.cos(e);
            this.camera.position.x = 30 * Math.sin(e);
            this.camera.lookAt(t);
            this.rotate-- }, initObject: function() { var e = { texture1: { value: this.txl.load("./images/lensflare0_alpha1_1.png") } };
            e.texture1.value.warpS = e.texture1.value.warpT = THREE.RepeatWrapping; var t = new THREE.BoxGeometry(500, 1e3, 500); var n = new THREE.ShaderMaterial({ uniforms: e, vertexShader: `varying vec2 vUv;\n                        attribute float percent;\n                        uniform float u_time;\n                        uniform float number;\n                        uniform float speed;\n                        uniform float length;\n                        varying float opacity;\n                        uniform float size;\n                \n                        void main()\n                        {\n                            vUv = uv;\n                            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n                            float l = clamp(1.0-length,0.0,1.0);//空白部分长度\n                            gl_PointSize = clamp(fract(percent*number + l - u_time*number*speed)-l ,0.0,1.) * size * (1./length);\n                            opacity = gl_PointSize/size;\n                            gl_Position = projectionMatrix * mvPosition;\n                        }`, fragmentShader: `#ifdef GL_ES\n                        precision mediump float;\n                        #endif\n                \n                        varying float opacity;\n                        uniform vec3 color;\n                        uniform float r;\n                        uniform float g;\n                        uniform float b;\n                        uniform float time;\n                        void main(){\n                            float red = abs(sin(time));\n                            float yellow = abs(sin(time));\n                            float blue = abs(sin(time));\n                            float op = abs(sin(time)*0.5);\n                            gl_FragColor = vec4(1.0,0.64,0,op);\n                        }`, transparent: true }); return n }, threeStart: function() { this.shader = this.initObject();
            this.GltfModel(); var e = "./model/lvguangjianzhu1_out/lvguangjianzhu1.gltf"; var t = "./model/baiguangjianzhu_out/baiguangjianzhu.gltf"; var n = "./model/banmaxian_out/banmaxian.gltf";
            this.LoadGltfModel(e, 0, -.5, 2, 0, 0, 0, 0, 0, 0, 0);
            this.LoadGltfModel(t, 1, -.5, 2, 0, 0, 0, 0, 0, 0, 0);
            this.LoadGltfModel(n, 2, 4.05, 0, .85, 0, 0, 0, 0, 0, 0);
            this.SetCity();
            this.SetPlane();
            this.SetWarning();
            this.animation() }, animation: function() { var e = this.clock.getDelta(); var t = 0;
            this.timeValue.time.value += e;
            this.commonUniforms.u_time.value += .01;
            this.uniform_1.u_r.value += e * 10; if (this.uniform_1.u_r.value >= 50) { this.uniform_1.u_r.value = .1 } this.renderer.render(this.scene, this.camera); var n = .01; var i = 0;
            this.txmaterial.map.matrix.translate(i, n);
            this.txmaterial_1.map.matrix.translate(i, n);
            this.txmaterial_4.map.matrix.translate(.01, 0);
            this.pyramid.rotation.y += e; for (var a = 0; a < this.mixers.length; a++) { this.mixers[a].update(e) } requestAnimationFrame(this.animation.bind(this));
            t = t + e; if (t > this.renderS) { this.CameraMove();
                t = 0 } }, GltfModel: function() { var e = this;
            this.loader.load("./model/quyuhuafen_out/quyuhuafen.gltf", t => { t.scene.position.set(-1, -.01, 0);
                t.scene.traverse(function(t) { if (t.isMesh) { t.castShadow = true;
                        t.receiveShadow = true;
                        t.material.transparent = true;
                        t.material.side = 2;
                        t.material = e.txmaterial_1;
                        t.material.alphaTest = .1 } });
                e.MainContainer.add(t.scene) });
            this.loader.load("./model/faguangdaolu_out/faguangdaolu.gltf", t => { t.scene.position.set(4.05, -.01, .8);
                t.scene.traverse(function(t) { if (t.isMesh) { t.castShadow = true;
                        t.receiveShadow = true;
                        t.material.transparent = true;
                        t.material.side = 2;
                        t.material = e.txmaterial;
                        t.material.alphaTest = .1 } });
                e.MainContainer.add(t.scene) });
            this.loader.load("./model/luxian_out/luxian.gltf", t => { t.scene.position.set(4.1, -.01, .8);
                t.scene.traverse(function(t) { if (t.isMesh) { t.castShadow = true;
                        t.receiveShadow = true;
                        t.material.transparent = true;
                        t.material.side = 2;
                        t.material = e.texture_4;
                        t.material.alphaTest = .1; let i = []; let a = t.geometry.attributes.position.array; let r = t.geometry.attributes.position.array.length / 3; for (let e = 0; e < r; e++) { i.push(new THREE.Vector3(a[3 * e], a[3 * e + 1], a[3 * e + 2])) } let o = new THREE.CatmullRomCurve3(i); let s = o.getPoints(100); var n = e.initFlyLine_1(o, { speed: Math.random() * .1, number: 4, color: e.randomVec3Color(), size: 3 }, 2e3);
                        n.position.set(6, -.01, -.2);
                        e.flyContainer.add(n) } });
                e.MainContainer.add(t.scene);
                e.MainContainer.add(e.container) });
            this.loader.load("./model/car2_out/car2.gltf", t => { t.scene.position.set(0, .1, 0);
                t.scene.scale.set(.2, .2, .2);
                t.scene.traverse(function(e) { if (e.isMesh) { e.castShadow = true;
                        e.receiveShadow = true;
                        e.material.transparent = true;
                        e.material.side = 2;
                        e.material.color = new THREE.Color(16729344);
                        e.material.alphaTest = .1 } }); var n = (new THREE.TextureLoader).load("./images/logo.png"); var i = new THREE.SpriteMaterial({ map: n, transparent: true, alphaTest: .1 }); var a = new THREE.Sprite(i);
                a.scale.set(1, 1, 1);
                a.position.set(0, 1, 0); var r = new THREE.CatmullRomCurve3([new THREE.Vector3(-2.2, .1, -16), new THREE.Vector3(-2.2, .1, -15), new THREE.Vector3(-2.2, .1, -14), new THREE.Vector3(-2.2, .1, -13), new THREE.Vector3(-2.2, .1, -12), new THREE.Vector3(-2.2, .1, -11), new THREE.Vector3(-2.2, .1, -10), new THREE.Vector3(-2.2, .1, -9), new THREE.Vector3(-2.2, .1, -8), new THREE.Vector3(-2.2, .1, -7), new THREE.Vector3(-2.2, .1, -6.5), new THREE.Vector3(-1.2, .1, -6.5), new THREE.Vector3(0, .1, -6.5), new THREE.Vector3(1, .1, -6.5), new THREE.Vector3(1, .1, -6), new THREE.Vector3(1, .1, -5), new THREE.Vector3(1, .1, -4), new THREE.Vector3(1, .1, -4), new THREE.Vector3(1, .1, -5), new THREE.Vector3(1, .1, -6.5), new THREE.Vector3(0, .1, -6.5), new THREE.Vector3(-1.2, .1, -6.5), new THREE.Vector3(-2.2, .1, -7), new THREE.Vector3(-2.2, .1, -8), new THREE.Vector3(-2.2, .1, -9), new THREE.Vector3(-2.2, .1, -10), new THREE.Vector3(-2.2, .1, -11), new THREE.Vector3(-2.2, .1, -12), new THREE.Vector3(-2.2, .1, -13), new THREE.Vector3(-2.2, .1, -14), new THREE.Vector3(-2.2, .1, -15), new THREE.Vector3(-2.2, .1, -16)]); var o = r.getPoints(1200); var s = new THREE.Geometry;
                s.vertices = o; var l = new THREE.LineBasicMaterial({ color: 4491519 }); var c = new THREE.Line(s, l); var m = 0;
                setInterval(() => { t.scene.position.set(o[m].x, o[m].y, o[m].z);
                    t.scene.lookAt(o[m + 1].x, o[m + 1].y, o[m + 1].z);
                    a.position.set(o[m].x, o[m].y + 1, o[m].z);
                    a.lookAt(o[m + 1].x, o[m + 1].y + 1, o[m + 1].z);
                    m++; if (m > 1199) { m = 0 } }, 16.6);
                e.scene.add(a);
                e.scene.add(t.scene) });
            this.loader.load("./model/shigongrenyuan_out/shigongrenyuan.gltf", t => { t.scene.position.set(2.8, .01, 4);
                t.scene.scale.set(.1, .1, .1);
                t.scene.rotation.set(0, -Math.PI / 2, 0);
                t.scene.traverse(function(e) { if (e.isMesh) { e.castShadow = true;
                        e.receiveShadow = true;
                        e.material.transparent = true;
                        e.material.side = 2;
                        e.material.alphaTest = .1 } });
                e.MainContainer.add(t.scene) });
            this.loader.load("./model/pyramid_out/pyramid.gltf", t => { t.scene.scale.set(.1, .1, .1);
                t.scene.rotation.set(0, -Math.PI / 2, 0);
                t.scene.traverse(function(t) { if (t.isMesh) { t.castShadow = true;
                        t.receiveShadow = true;
                        t.material.transparent = true;
                        t.material.side = 2;
                        t.material.roughness = .5;
                        t.material.metalness = .5;
                        t.material = e.txmaterial;
                        t.material.alphaTest = .1 } });
                e.pyramid.add(t.scene);
                e.pyramid.position.set(.8, 4.4, 7.4);
                e.MainContainer.add(e.pyramid) }) }, LoadGltfModel: function(e, t, n, i, a, r, o, s, l, c, m) { var d = this;
            this.loader.load(e, e => { e.scene.traverse(function(e) { if (t == 0) { if (e.isMesh) { e.castShadow = true;
                            e.receiveShadow = true;
                            e.material.transparent = true;
                            e.material.opacity = .8;
                            e.material.side = 2;
                            e.material = d.txmaterial;
                            e.material.emissive = new THREE.Color(6314700);
                            e.material.alphaTest = .1; let t = new THREE.EdgesGeometry(e.geometry, 30); let n = new THREE.LineSegments(d.cubeEdges, d.edgesMtl);
                            d.container.add(n) } } if (t == 1) { if (e.isMesh) { e.castShadow = true;
                            e.receiveShadow = true;
                            e.material = d.edgesMtl_2;
                            e.material.alphaTest = .1 } } if (t == 2) { if (e.isMesh) { e.castShadow = true;
                            e.receiveShadow = true;
                            e.material = d.roadLineMat;
                            e.material.alphaTest = .1 } } });
                d.container.position.set(n, i, a);
                e.scene.position.set(n, i, a);
                e.scene.rotation.set(r, o, s);
                d.container.rotation.set(l, c, s);
                d.MainContainer.add(e.scene);
                d.MainContainer.add(d.container) }) }, initCircleCurveGroup: function(e) { let t = []; for (let i = 0; i < e; i++) { var n = new THREE.QuadraticBezierCurve3(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 3, 6), new THREE.Vector3(0, -3, 10));
                t.push(n) } return t }, initLineMaterial: function(e) { let t = e ? Number(e.number) || 1 : 1; let n = e ? Number(e.speed) || 1 : 1; let i = e ? Number(e.length) || .5 : .5; let a = e ? Number(e.size) || 3 : 3; let r = e ? e.color || new THREE.Vector3(0, 1, 1) : new THREE.Vector3(0, 1, 1); let o = { u_time: this.commonUniforms.u_time, number: { type: "f", value: t }, speed: { type: "f", value: n }, length: { type: "f", value: i }, size: { type: "f", value: a }, color: { type: "v3", value: r }, r: { type: "f", value: 0 }, g: { type: "f", value: 0 }, b: { type: "f", value: 0 }, time: this.timeValue.time }; let s = new THREE.ShaderMaterial({ uniforms: o, vertexShader: `varying vec2 vUv;\n                        attribute float percent;\n                        uniform float u_time;\n                        uniform float number;\n                        uniform float speed;\n                        uniform float length;\n                        varying float opacity;\n                        uniform float size;\n\n                        void main()\n                        {\n                            vUv = uv;\n                            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n                            float l = clamp(1.0-length,0.0,1.0);//空白部分长度\n                            gl_PointSize = clamp(fract(percent*number + l - u_time*number*speed)-l ,0.0,1.) * size * (1./length);\n                            opacity = gl_PointSize/size;\n                            gl_Position = projectionMatrix * mvPosition;\n                        }`, fragmentShader: `#ifdef GL_ES\n                        precision mediump float;\n                        #endif\n\n                        varying float opacity;\n                        uniform vec3 color;\n                        uniform float r;\n                        uniform float g;\n                        uniform float b;\n                        uniform float time;\n                        void main(){\n                            float red = abs(sin(time));\n                            float yellow = abs(sin(time));\n                            float blue = abs(sin(time));\n                            float op = abs(sin(time)*0.5);\n                            gl_FragColor = vec4(1.0,0.64,0,op);\n                        }`, transparent: true }); return s }, initFlyLine: function(e, t, n) { var i = e.getPoints(n); var a = (new THREE.BufferGeometry).setFromPoints(i); let r = i.length; var o = new Float32Array(r); for (let e = 0; e < i.length; e += 1) { o[e] = e / r } a.setAttribute("percent", new THREE.BufferAttribute(o, 1)); let s = this.initLineMaterial(t); var l = new THREE.Points(a, s); let c = new THREE.Euler(0, Math.random() * Math.PI * 2, 0);
            l.setRotationFromEuler(c);
            l.rotation.y = Math.random() * Math.PI * 2;
            this.mainFlyContainer.add(l);
            this.mainFlyContainer.position.set(.8, 3, 7.4) }, initFlyLine_1: function(e, t, n) { var i = this; var a = e.getPoints(n); var r = (new THREE.BufferGeometry).setFromPoints(a); let o = a.length; var s = new Float32Array(o); for (let e = 0; e < a.length; e += 1) { s[e] = e / o } r.setAttribute("percent", new THREE.BufferAttribute(s, 1)); let l = i.SetRoadShader(t); var c = new THREE.Points(r, l); return c }, initFlyLine_2: function(e, t, n) { var i = this; var a = e.getPoints(n); var r = (new THREE.BufferGeometry).setFromPoints(a); let o = a.length; var s = new Float32Array(o); for (let e = 0; e < a.length; e += 1) { s[e] = e / o } r.setAttribute("percent", new THREE.BufferAttribute(s, 1)); let l = i.SetRoadShader(t); var c = new THREE.Points(r, l); return c }, randomVec3Color: function() { return new THREE.Vector3(Math.random() * .6 + .4, Math.random() * .6 + .4, Math.random() * .6 + .4) }, SetCity: function() { var e = this; var t = { vertexShader: ` \n                            varying vec3 vp;\n                            void main(){\n                            vp = position; \n                            gl_Position\t= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                            }\n                        `, fragmentShader: `\n                            varying vec3 vp;\n                            uniform vec3 u_color;\n                            uniform vec3 u_tcolor;\n                            uniform float u_r;\n                            uniform float u_length;\n                            uniform float u_max;\n                            float getLeng(float x, float y){\n                                return  sqrt((x-0.0)*(x-0.0)+(y-0.0)*(y-0.0));\n                            }\n                            void main(){ \n                                float uOpacity = 0.3; \n                                vec3 vColor = u_color;\n                                float uLength = getLeng(vp.x,vp.z);\n                                if ( uLength <= u_r && uLength > u_r - u_length ) { \n                                    float op = sin( (u_r - uLength) / u_length ) * 0.8+ 0.2 ;\n                                    uOpacity = op; \n                                    if( vp.y<0.0){\n                                        vColor  = u_tcolor * 0.8; \n                                    }else{ \n                                        vColor = u_tcolor;\n                                    };\n                                } \n                                gl_FragColor = vec4(vColor,uOpacity);\n                            }\n                        ` }; var n = new THREE.ShaderMaterial({ vertexShader: t.vertexShader, fragmentShader: t.fragmentShader, side: THREE.DoubleSide, uniforms: e.uniform_1, transparent: true, depthWrite: false, alphaTest: .1 });

            function i() { $("#canvas-frame").click(() => { e.renderS = 1e5 });
                $("#canvas-frame").mousedown(() => { e.renderS = 1e5 });
                $("#canvas-frame").dblclick(() => { e.renderS = 0 }) } this.flyContainer.position.set(-1.86, 0, 1); var a = new Promise(function(t, i) { e.loader.load("./model/1_out/1.gltf", e => { e.scene.position.set(-10.5, 1.1, 12.5);
                    e.scene.traverse(function(e) { if (e.isMesh) { e.castShadow = true;
                            e.receiveShadow = true;
                            e.material.transparent = true;
                            e.material.side = 2;
                            e.material = n;
                            e.material.emissive = new THREE.Color(65484);
                            e.material.color = new THREE.Color(400714);
                            e.material.alphaTest = .1;
                            e.material.roughness = 0;
                            e.material.metalness = 0 } });
                    t(e.scene) }) }).then(e => { this.MainContainer.add(e) }); var r = new Promise(function(t, i) { e.loader.load("./model/2_out/2.gltf", e => { e.scene.position.set(-10.5, .4, 12.5);
                    e.scene.traverse(function(e) { if (e.isMesh) { e.castShadow = true;
                            e.receiveShadow = true;
                            e.material.transparent = true;
                            e.material.side = 2;
                            e.material = n;
                            e.material.emissive = new THREE.Color(65484);
                            e.material.color = new THREE.Color(400714);
                            e.material.alphaTest = .1;
                            e.material.roughness = 0;
                            e.material.metalness = 0 } });
                    t(e.scene) }) }).then(t => { e.MainContainer.add(t) });
            Promise.all([a, r]).then(function() { e.newDiv.remove(), e.style.remove(), e.renderS = 1 / 60;
                i() });
            this.loader.load("./model/3_out/3.gltf", t => { t.scene.position.set(-10.5, .8, 12.5);
                t.scene.traverse(function(e) { if (e.isMesh) { e.castShadow = true;
                        e.receiveShadow = true;
                        e.material.transparent = true;
                        e.material.side = 2;
                        e.material = n;
                        e.material.emissive = new THREE.Color(65484);
                        e.material.color = new THREE.Color(400714);
                        e.material.alphaTest = .1;
                        e.material.roughness = 0;
                        e.material.metalness = 0 } });
                e.MainContainer.add(t.scene) });
            this.loader.load("./model/4_out/4.gltf", t => { t.scene.position.set(-10.5, 1.5, 12.5);
                t.scene.traverse(function(e) { if (e.isMesh) { e.castShadow = true;
                        e.receiveShadow = true;
                        e.material.transparent = true;
                        e.material.side = 2;
                        e.material = n;
                        e.material.emissive = new THREE.Color(65484);
                        e.material.color = new THREE.Color(400714);
                        e.material.alphaTest = .1;
                        e.material.roughness = 0;
                        e.material.metalness = 0 } });
                e.MainContainer.add(t.scene) }) }, SetRoadShader: function() { var e = { vertexShader: ` \n                        varying vec2 vUv;\n                        attribute float percent;\n                        uniform float u_time;\n                        uniform float number;\n                        uniform float speed;\n                        uniform float length;\n                        varying float opacity;\n                        uniform float size;\n            \n                        void main()\n                        {\n                            vUv = uv;\n                            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n                            float l = clamp(1.0-length,0.0,1.0);//空白部分长度\n            \n                            gl_PointSize = clamp(fract(percent*number + l - u_time*number*speed)-l ,0.0,1.) * size * (1./length);\n            \n                            opacity = gl_PointSize/size;\n                            gl_Position = projectionMatrix * mvPosition;\n                    }\n                        `, fragmentShader: `\n                        #ifdef GL_ES\n                        precision mediump float;\n                        #endif\n            \n                        varying float opacity;\n                        uniform vec3 color;\n                        uniform float r;\n                        uniform float g;\n                        uniform float b;\n                        uniform float time;\n                        void main(){\n                            float red = abs(sin(time));\n                            float yellow = abs(sin(time));\n                            float blue = abs(sin(time));\n                            float op = abs(sin(time)*0.5);\n                            gl_FragColor = vec4(color,0.5);\n                        }\n                        ` }; let t = 5; let n = Math.random() * .2 + .2; let i = .3; let a = 3.5; let r = this.randomVec3Color(); let o = { u_time: this.commonUniforms.u_time, number: { type: "f", value: t }, speed: { type: "f", value: n }, length: { type: "f", value: i }, size: { type: "f", value: a }, color: { type: "v3", value: r }, r: { type: "f", value: 0 }, g: { type: "f", value: 0 }, b: { type: "f", value: 0 }, time: this.timeValue.time }; var s = new THREE.ShaderMaterial({ vertexShader: e.vertexShader, fragmentShader: e.fragmentShader, side: THREE.DoubleSide, uniforms: o, transparent: true, alphaTest: .1 }); return s }, SetPlane: function() { var e = new THREE.PlaneBufferGeometry(40, 50); var t = new THREE.MeshBasicMaterial({ color: 0, side: THREE.DoubleSide }); var n = new THREE.Mesh(e, t);
            n.rotation.x = -Math.PI / 2;
            n.position.y = -.5;
            n.visible = false; var i = new THREE.TetrahedronBufferGeometry(.3, 0); var a = new THREE.Mesh(i, this.initObject());
            a.position.set(-3, 4.5, 6);
            a.rotation.set(Math.PI / 3, 0, 0) }, SetWarning: function() { var e = (new THREE.TextureLoader).load("./images/warning_2.png"); var t = new THREE.SpriteMaterial({ map: e, transparent: true, alphaTest: .1 }); var n = new THREE.Sprite(t);
            n.scale.set(.2, .2, .2);
            n.position.set(2.8, .5, 4);
            this.MainContainer.add(n) }, Render: function() { this.animationTimer = requestAnimationFrame(this.Render.bind(this));
            this.renderer.render(this.scene, this.camera) }, StopRender: function() { cancelAnimationFrame(this.animationTimer) }, reSize: function() { this.camera.aspect = this.dom.offsetWidth / 1080;
            this.camera.updateProjectionMatrix();
            this.camera.lookAt(0, 0, 0);
            this.renderer.setSize(this.dom.offsetWidth, 1080) } }, e.init = t });