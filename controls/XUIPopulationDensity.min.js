(function(a, t) { typeof exports === "object" && typeof module !== "undefined" ? t(exports) : typeof define === "function" && define.amd ? define(["exports"], t) : t(a.XUIPopulationDensity = {}) })(XUI, function(a) {
    "use strict";

    function t(a) { XUI.inherits(o, XUI.ControlBase); var t = new o(a); return t }
    var r = [];
    var s = [];
    var e = [];
    var i = [];
    for (var n = 0; n < 105; n++) { r.push([Math.random() * 10 + 60, Math.random() * 360]) }
    for (var n = 0; n < 95; n++) { s.push([Math.random() * 10 + 65, Math.random() * 360]) }
    for (var n = 0; n < 85; n++) { e.push([Math.random() * 10 + 70, Math.random() * 360]) }
    for (var n = 0; n < 80; n++) { i.push([Math.random() * 10 + 60, Math.random() * 360]) }
    for (var n = 0; n < 10; n++) {
        r.push([Math.random() * 10 + 50, Math.random() * 360]);
        s.push([Math.random() * 10 + 45, Math.random() * 360]);
        e.push([Math.random() * 10 + 30, Math.random() * 360]);
        i.push([Math.random() * 10 + 30, Math.random() * 360])
    }

    function o(a) {
       
        this.superClass.call(this, a);
        this.eCharts = echarts.init(this.dom);
        this._polar = {}, this._angleAxis = { type: "value", show: false }, this._radiusAxis = { axisAngle: 0, show: false }, this._animation = true;
        this._animationDuration = 3e3;
        this._series = [{ coordinateSystem: "polar", angleAxisIndex: 0, radiusAxisIndex: 0, name: "市区", type: "scatter", symbolSize: 4, itemStyle: { color: "#fff" }, data: r }, { coordinateSystem: "polar", angleAxisIndex: 0, radiusAxisIndex: 0, name: "街道", type: "scatter", symbolSize: 4, itemStyle: { color: "#00BDDD" }, data: s }, { coordinateSystem: "polar", angleAxisIndex: 0, radiusAxisIndex: 0, name: "乡镇", type: "scatter", symbolSize: 4, itemStyle: { color: "#0087DC" }, data: e }, { coordinateSystem: "polar", angleAxisIndex: 0, radiusAxisIndex: 0, name: "郊区", type: "scatter", symbolSize: 4, itemStyle: { color: "#17539D" }, data: i }];
        this.setOption()
    }
    o.prototype = {
        constructor: o,
        setOption: function() {
            var a = { animationDuration: this._animationDuration, animation: this._animation, angleAxis: this._angleAxis, radiusAxis: this._radiusAxis, polar: this._polar, series: this._series, legend: this._legend };
            this.eCharts.setOption(a);
            var t = this;
            window.addEventListener("resize", function() { t.reSize() })
        },
        reSize: function() { this.eCharts.resize() },
        Animation2: function() {
            var a = [];
            var t = [];
            var r = [];
            var s = [];
            for (var e = 0; e < 105; e++) { a.push([Math.random() * 10 + 60, Math.random() * 360]) }
            for (var e = 0; e < 95; e++) { t.push([Math.random() * 10 + 65, Math.random() * 360]) }
            for (var e = 0; e < 85; e++) { r.push([Math.random() * 10 + 70, Math.random() * 360]) }
            for (var e = 0; e < 80; e++) { s.push([Math.random() * 10 + 60, Math.random() * 360]) }
            for (var e = 0; e < 10; e++) {
                a.push([Math.random() * 10 + 50, Math.random() * 360]);
                t.push([Math.random() * 10 + 45, Math.random() * 360]);
                r.push([Math.random() * 10 + 30, Math.random() * 360]);
                s.push([Math.random() * 10 + 30, Math.random() * 360])
            }
            this._series[0].data = a;
            this._series[1].data = t;
            this._series[2].data = r;
            this._series[3].data = s;
            var i = { series: this._series };
            this.eCharts.setOption(i)
        }
    };
    a.init = t
});